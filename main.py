from datetime import datetime
from io import StringIO
from aiogram.client.default import DefaultBotProperties, Default
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from cohere import Client
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types
import asyncio, logging, time, os


from config import *


async def edit_ans(msg: types.Message, temp: str, text: StringIO, logger: logging.Logger, i: int, start: float):
    if i % PROGRESS_STEP == 0:
        dots_count = (i // PROGRESS_STEP) % 4
        phase = (i // PROGRESS_STEP) % len(MOONS)
        secs = time.time() - start

        try:
            await msg.edit_text(
                f'{MOONS[phase]}{temp}{secs:.1f} —Å–µ–∫{"." * dots_count}'
                f'\n\n{text.getvalue()}'
            )
        except TelegramBadRequest as e:
            await msg.edit_text(
                f'{MOONS[phase]}{temp}{secs:.1f} —Å–µ–∫{"." * dots_count}'
            )
            logger.error(f'{text} | {e.message}')


async def main() -> None:
    logger = logging.getLogger(__name__)
    bot = Bot(token=BOT_API_TOKEN,
              default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
    dp = Dispatcher()
    chats = dict()

    @dp.message(Command(commands=['start']))
    async def start_message(msg: types.Message) -> None:
        await msg.answer('–ù—É –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ :) –Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.'
                         ' –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É **/web**!\n'
                         '–¢–∞–∫ –∂–µ –∑–∞–≥–ª—è–Ω–∏ –Ω–∞ –Ω–∞—à [GitHub!](https://github.com/rokokol/andromeda-i) üòå')
        await msg.delete()

    @dp.message(Command(commands=['help']))
    async def help_message(msg: types.Message) -> None:
        await msg.answer(
            COMMANDS,
            parse_mode=ParseMode.HTML
        )


    @dp.message(Command(commands=['web']))
    async def toggle_web(msg: types.Message) -> None:
        global is_web_search

        is_web_search = (is_web_search + 1) % 2
        if is_web_search:
            await msg.answer('–¢–∞–∫ –∏ –±—ã—Ç—å, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ª—é–±–∏–º—ã–º **–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º** –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞!')
        else:
            await msg.answer('–ë–æ–ª—å—à–µ –≤ **–∏–Ω—Ç–µ—Ä–Ω–µ—Ç** –Ω–∏ –Ω–æ–≥–æ–π...')


    @dp.message()
    async def conversation(msg: types.Message) -> None:
        user = msg.from_user.username
        mode = 'text-to-text' + (' + WEB' if is_web_search else '')
        context = chats.get(user, [])
        text = msg.text if msg.text is not None else ':)'
        temp = f' | {mode} | @{user} | '

        client = Client(client_name=user, api_key=COHERE_API_TOKEN)
        resp_stream = client.chat_stream(

            message=text,

            model="command-r-plus",

            preamble=PREAMBLE.format(user),

            chat_history=context,

            connectors=CONNECTORS[is_web_search]
        )

        resp_text = StringIO()
        start = time.time()
        reply = {
            'ans': await msg.answer(f'üåë{temp}–æ—Ç–ø—Ä–∞–≤–∫–∞'),
            'search': None
        }
        is_searched = False
        search_text = '' # –ò–Ω–∞—á–µ –ø–æ—á–µ–º—É-—Ç–æ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for i, event in enumerate(resp_stream):
            await edit_ans(reply['ans'], temp, resp_text, logger, i, start)
            match event.event_type:  # TODO: —Å–¥–µ–ª–∞—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–∏ WEB –∏ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ snippets

                case 'stream-start':
                    if is_web_search:
                        reply['search'] = await reply['ans'].reply('–ò—â—É:')

                case 'search-queries-generation':
                    is_searched = True
                    queries = StringIO()
                    for query in event.search_queries:
                        queries.write(f'\n  üîç {query.text}')

                    search_text = reply['search'].text + queries.getvalue()
                    await reply['search'].edit_text(search_text)

                case 'search-results':
                    results = StringIO()
                    results.write('\n\n–ù–∞—à–µ–ª:')
                    for res in event.documents:
                        quote = LINK_CITE.format(res['title'], res['url'].strip())
                        results.write(f'\n  üí° {quote}')

                    await reply['search'].edit_text(search_text + results.getvalue())

                case 'text-generation':
                    resp_text.write(event.text)

                    if not is_searched and is_web_search:
                        await reply['search'].edit_text('–ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è ü§∑')
                        is_searched = True

                case 'stream-end':
                    wasted_secs = time.time() - start
                    chats[user] = event.response.chat_history
                    logger.info(f'msg: {text} | by: {user} | response: {event.response.text}')

                    try:
                        await reply['ans'].edit_text(
                            f'üåï{temp}{wasted_secs:.1f} —Å–µ–∫.'
                            f'\n\n{event.response.text}'
                        )
                    except TelegramBadRequest as e:
                        await reply['ans'].edit_text(
                            f'üåï{temp}{wasted_secs:.1f} —Å–µ–∫.'
                            f'\n\n{event.response.text}',
                            parse_mode=Default("parse_mode")
                        )
                        logger.error(f'{text} | {e.message}')


    await dp.start_polling(bot)

if __name__ == "__main__":
    is_web_search = 0
    COHERE_API_TOKEN = str(os.getenv('COHERE_API_TOKEN'))
    BOT_API_TOKEN = str(os.getenv('ANDROMEDAI_API_TOKEN'))
    today = datetime.today()
    os.makedirs('logs', exist_ok=True)
    if TEST:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    else:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            filename=f'logs/{today.day}.{today.month}.{today.year}.log',
            filemode='a'
        )

    asyncio.run(main())
